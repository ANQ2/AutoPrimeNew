const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Client = require("../models/Client");
const Employee = require("../models/Employee");

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (payload) => {
    return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "7d" });
};

// üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ client)
router.post("/register", async (req, res) => {
    try {
        const { full_name, email, phone, password } = req.body;

        const existing = await Client.findOne({ email });
        if (existing) return res.status(400).json({ error: "–ü–æ—á—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞" });

        const hashed = await bcrypt.hash(password, 10);
        const client = new Client({
            full_name,
            email,
            phone,
            password: hashed,
            role: "client" // üëà —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–æ–ª—å
        });

        await client.save();

        const token = generateToken({ id: client._id, role: "client" });
        res.json({
            token,
            user: {
                _id: client._id,
                full_name: client.full_name,
                email: client.email,
                phone: client.phone,
                role: client.role
            }
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// üîë –í—Ö–æ–¥ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
router.post("/login", async (req, res) => {
    try {
        const { email, password } = req.body;

        // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
        const client = await Client.findOne({ email });
        if (client && await bcrypt.compare(password, client.password)) {
            const token = generateToken({ id: client._id, role: client.role });
            return res.json({
                token,
                user: {
                    _id: client._id,
                    full_name: client.full_name,
                    email: client.email,
                    phone: client.phone,
                    role: client.role
                }
            });
        }

        // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        const employee = await Employee.findOne({ email });
        if (employee && await bcrypt.compare(password, employee.password)) {
            const token = generateToken({ id: employee._id, role: employee.position });
            return res.json({
                token,
                user: {
                    _id: employee._id,
                    full_name: employee.full_name,
                    email: employee.email,
                    role: employee.position
                }
            });
        }

        res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

module.exports = router;
